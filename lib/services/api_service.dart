import 'package:dio/dio.dart';
import 'package:path/path.dart' as path;
import '../models/ovce.dart';

/// Konfigurace API endpoints
class ApiConfig {
  // P≈ôi v√Ωvoji pou≈æ√≠v√°me localhost, pozdƒõji zmƒõn√≠me na Railway URL
  static const String baseUrl = 'http://localhost:3000/api';
  
  // Railway produkƒçn√≠ URL 
  static const String railwayUrl = 'https://ovce-databaze-production.up.railway.app/api';
  
  // Rozhodne jestli pou≈æ√≠v√°me lok√°ln√≠ nebo produkƒçn√≠ API
  static bool get useProduction => true; // Nyn√≠ pou≈æ√≠v√°me Railway!
  
  static String get apiUrl => useProduction ? railwayUrl : baseUrl;
}

/// Servis pro komunikaci s REST API
class ApiService {
  static final ApiService _instance = ApiService._internal();
  factory ApiService() => _instance;
  ApiService._internal();

  late Dio _dio;
  
  /// Inicializace API service
  void initialize() {
    _dio = Dio(BaseOptions(
      baseUrl: ApiConfig.apiUrl,
      connectTimeout: const Duration(seconds: 10),
      receiveTimeout: const Duration(seconds: 15),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    ));
    
    // P≈ôid√°me interceptor pro logov√°n√≠
    _dio.interceptors.add(LogInterceptor(
      requestBody: true,
      responseBody: true,
      logPrint: (obj) => print('üåê API: $obj'),
    ));
    
    print('‚úÖ ApiService inicializov√°n: ${ApiConfig.apiUrl}');
  }

  /// Z√≠sk√° v≈°echny ovce ze serveru
  Future<List<Ovce>> getAllOvce() async {
    try {
      print('üì° Z√≠sk√°v√°m v≈°echny ovce ze serveru...');
      final response = await _dio.get('/ovce');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = response.data['data'] ?? response.data;
        final ovce = data.map((json) => Ovce.fromApiJson(json)).toList();
        print('‚úÖ Naƒçteno ${ovce.length} ovc√≠ ze serveru');
        return ovce;
      } else {
        throw Exception('Chyba p≈ôi naƒç√≠t√°n√≠ ovc√≠: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ovc√≠: $e');
      rethrow;
    }
  }

  /// P≈ôid√° novou ovci na server
  Future<Ovce> createOvce(Ovce ovce) async {
    try {
      print('üì° P≈ôid√°v√°m ovci na server: ${ovce.usiCislo}');
      
      final data = ovce.toApiJson();
      final response = await _dio.post('/ovce', data: data);
      
      if (response.statusCode == 201 || response.statusCode == 200) {
        final createdOvce = Ovce.fromApiJson(response.data['data'] ?? response.data);
        print('‚úÖ Ovce √∫spƒõ≈°nƒõ p≈ôid√°na na server');
        return createdOvce;
      } else {
        throw Exception('Chyba p≈ôi vytv√°≈ôen√≠ ovce: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi vytv√°≈ôen√≠ ovce: $e');
      rethrow;
    }
  }

  /// Aktualizuje ovci na serveru
  Future<Ovce> updateOvce(Ovce ovce) async {
    try {
      print('üì° Aktualizuji ovci na serveru: ${ovce.usiCislo}');
      
      final data = ovce.toApiJson();
      final response = await _dio.put('/ovce/${ovce.id}', data: data);
      
      if (response.statusCode == 200) {
        final updatedOvce = Ovce.fromApiJson(response.data['data'] ?? response.data);
        print('‚úÖ Ovce √∫spƒõ≈°nƒõ aktualizov√°na na serveru');
        return updatedOvce;
      } else {
        throw Exception('Chyba p≈ôi aktualizaci ovce: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi aktualizaci ovce: $e');
      rethrow;
    }
  }

  /// Sma≈æe ovci ze serveru
  Future<void> deleteOvce(String ovceId) async {
    try {
      print('üì° Ma≈æu ovci ze serveru: $ovceId');
      
      final response = await _dio.delete('/ovce/$ovceId');
      
      if (response.statusCode == 200 || response.statusCode == 204) {
        print('‚úÖ Ovce √∫spƒõ≈°nƒõ smaz√°na ze serveru');
      } else {
        throw Exception('Chyba p≈ôi maz√°n√≠ ovce: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi maz√°n√≠ ovce: $e');
      rethrow;
    }
  }

  /// Nahraje fotku ovce na server
  Future<String> uploadPhoto(String photoPath, String usiCislo) async {
    try {
      print('üì° Nahr√°v√°m fotku pro ovci: $usiCislo');
      
      final fileName = '${usiCislo}_${DateTime.now().millisecondsSinceEpoch}${path.extension(photoPath)}';
      
      final formData = FormData.fromMap({
        'photo': await MultipartFile.fromFile(
          photoPath,
          filename: fileName,
        ),
        'usi_cislo': usiCislo,
      });
      
      final response = await _dio.post('/upload-photo', data: formData);
      
      if (response.statusCode == 200) {
        final photoUrl = response.data['photo_url'] ?? response.data['url'];
        print('‚úÖ Fotka √∫spƒõ≈°nƒõ nahr√°na: $photoUrl');
        return photoUrl;
      } else {
        throw Exception('Chyba p≈ôi nahr√°v√°n√≠ fotky: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi nahr√°v√°n√≠ fotky: $e');
      rethrow;
    }
  }

  /// Nahraje v√≠ce fotek najednou
  Future<List<String>> uploadMultiplePhotos(List<String> photoPaths, String usiCislo) async {
    final uploadedUrls = <String>[];
    
    for (final photoPath in photoPaths) {
      try {
        final url = await uploadPhoto(photoPath, usiCislo);
        uploadedUrls.add(url);
      } catch (e) {
        print('‚ùå Chyba p≈ôi nahr√°v√°n√≠ fotky $photoPath: $e');
        // Pokraƒçujeme s dal≈°√≠mi fotkami
      }
    }
    
    return uploadedUrls;
  }

  /// Sma≈æe fotku ze serveru
  Future<void> deletePhoto(String photoUrl) async {
    try {
      print('üì° Ma≈æu fotku ze serveru: $photoUrl');
      
      final response = await _dio.delete('/delete-photo', data: {
        'photo_url': photoUrl,
      });
      
      if (response.statusCode == 200) {
        print('‚úÖ Fotka √∫spƒõ≈°nƒõ smaz√°na ze serveru');
      } else {
        throw Exception('Chyba p≈ôi maz√°n√≠ fotky: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Chyba p≈ôi maz√°n√≠ fotky: $e');
      rethrow;
    }
  }

  /// Z√≠sk√° informace o stavu serveru
  Future<Map<String, dynamic>> getServerStatus() async {
    try {
      final response = await _dio.get('/status');
      return response.data;
    } catch (e) {
      print('‚ùå Server nen√≠ dostupn√Ω: $e');
      return {'status': 'offline', 'error': e.toString()};
    }
  }

  /// Synchronizuje lok√°ln√≠ data se serverem
  Future<void> syncWithServer(List<Ovce> localOvce) async {
    try {
      print('üîÑ Synchronizuji data se serverem...');
      
      // Z√≠sk√°me aktu√°ln√≠ data ze serveru
      final serverOvce = await getAllOvce();
      final serverUsiCisla = serverOvce.map((o) => o.usiCislo).toSet();
      
      // Nahrajeme lok√°ln√≠ ovce, kter√© nejsou na serveru
      for (final localOvce in localOvce) {
        if (!serverUsiCisla.contains(localOvce.usiCislo)) {
          await createOvce(localOvce);
        }
      }
      
      print('‚úÖ Synchronizace dokonƒçena');
    } catch (e) {
      print('‚ùå Chyba p≈ôi synchronizaci: $e');
      rethrow;
    }
  }

  /// Kontrola internetov√©ho p≈ôipojen√≠
  Future<bool> hasInternetConnection() async {
    try {
      print('üîç Testuji p≈ôipojen√≠ k: ${ApiConfig.apiUrl}/status');
      final response = await _dio.get('/status');
      print('‚úÖ API odpovƒõdƒõlo: ${response.statusCode}');
      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Chyba p≈ôipojen√≠ k API: $e');
      return false;
    }
  }
}